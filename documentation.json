{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "AppService",
            "id": "injectable-AppService-4a64df27185adc90eb66da99a4a2d0e7",
            "file": "src/app/app.service.ts",
            "properties": [
                {
                    "name": "accountNumber",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "alertMsg",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "balance",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "clientId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "piAccount",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "piAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "piVS",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "transactions",
                    "defaultValue": "[]",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppService {\n\n  constructor() { }\n\n  alertMsg: string;\n  email: string;\n  clientId: string;\n  accountNumber: string;\n  balance: number;\n  transactions: Array<any> = [];\n\n  piAccount: string;\n  piAmount: number;\n  piVS: string;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AbstractConfiguration",
            "id": "class-AbstractConfiguration-36e34a7051dcd9a0df07e6b7484061b6",
            "file": "src/config-loader/abstract-configuration.ts",
            "type": "class",
            "sourceCode": "import { MissingKeyConfigurationEnum } from './types';\n\n/**\n * Abstract class to keep application configuration as a map key -> value\n */\nexport abstract class AbstractConfiguration {\n\n  protected config: object = {};\n  protected _isLoaded = false; /* tslint:disable-line:variable-name */\n\n  /**\n   *  return configuration item\n   * @param key -  item name\n   * @param missingKeyConfig - for backward compatibility supports also boolean that enables throwing error\n   * when true, logging warning otherwise\n   */\n  public getByKey(\n    key: string,\n    missingKeyConfig: boolean | MissingKeyConfigurationEnum = MissingKeyConfigurationEnum.Warn,\n    defaultValue?: string\n  ): any {\n    if (!this.isLoaded) {\n      throw Error(`Configuration is not loaded yet! This key: \"${key}\" could not be loaded`);\n    }\n    if (!this.config) {\n      throw Error('Configuration is empty!');\n    }\n\n    let result = (this.config as any)[key];\n    if (result === undefined) {\n      let msg = `Configuration for this key: \"${key}\" does not exists!`;\n      if (defaultValue) {\n        result = defaultValue;\n        msg += ` Used default value: \"${defaultValue}\" instead.`;\n      }\n      if (missingKeyConfig !== MissingKeyConfigurationEnum.Ignore) {\n        if (!missingKeyConfig) { // true also for MissingKeyConfigurationEnum.Warn\n          console.warn(msg);\n        } else {\n          throw Error(`Configuration for this key: \"${key}\" does not exists!`);\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * return complete configuration data\n   */\n  public getAllItems(): object {\n    return {...this.config};\n  }\n\n  /**\n   * configuration loaded flag\n   */\n  get isLoaded(): boolean {\n    return this._isLoaded;\n  }\n}\n",
            "properties": [
                {
                    "name": "_isLoaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ]
                },
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "description": "<p>Abstract class to keep application configuration as a map key -&gt; value</p>\n",
            "rawdescription": "Abstract class to keep application configuration as a map key -> value",
            "methods": [
                {
                    "name": "getAllItems",
                    "args": [],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 50,
                    "description": "<p>return complete configuration data</p>\n",
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getByKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "missingKeyConfig",
                            "type": "boolean | MissingKeyConfigurationEnum",
                            "defaultValue": "MissingKeyConfigurationEnum.Warn"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "description": "<p>return configuration item</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 340,
                                "end": 343,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 334,
                                "end": 339,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>item name</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 369,
                                "end": 385,
                                "flags": 0,
                                "escapedText": "missingKeyConfig"
                            },
                            "type": "boolean | MissingKeyConfigurationEnum",
                            "defaultValue": "MissingKeyConfigurationEnum.Warn",
                            "tagName": {
                                "pos": 363,
                                "end": 368,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>for backward compatibility supports also boolean that enables throwing error\nwhen true, logging warning otherwise</li>\n</ul>\n"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "isLoaded": {
                    "name": "isLoaded",
                    "getSignature": {
                        "name": "isLoaded",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 57,
                        "description": "<p>configuration loaded flag</p>\n"
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Configuration",
            "id": "class-Configuration-334384ce5003ac37601b8c4b519ccf6c",
            "file": "src/config-loader/configuration.ts",
            "type": "class",
            "sourceCode": "import { MissingKeyConfigurationEnum } from './types';\nimport { AbstractConfiguration } from './abstract-configuration';\n\n/**\n * Singleton implementation of AbstractConfiguration\n */\nexport class Configuration extends AbstractConfiguration {\n    private static instance: Configuration;\n\n    protected constructor() {\n      super();\n    }\n\n    /**\n     * return instance of Configuration\n     */\n    public static getConfig(): Configuration {\n        if (!this.instance) {\n            this.instance = new Configuration();\n        }\n        return this.instance;\n    }\n\n    /**\n     * static method to get value from configuration by key\n     * this is shortcut for confortable usage if you want use one configuration\n     * instance\n     *\n     * ### Example\n     *\n     * ```typescript\n     * //simple\n     * Configuration.get('api.caseUrl')\n     * ```\n     *\n     * @param key -  item name\n     * @param missingKeyConfig - for backward compatibility supports also boolean that enables throwing error\n     * when true, logging warning otherwise\n     */\n    public static get(\n      key: string,\n      missingKeyConfig: boolean | MissingKeyConfigurationEnum = MissingKeyConfigurationEnum.Warn,\n      defaultValue?: string\n    ) {\n        return this.getConfig().getByKey(key, missingKeyConfig, defaultValue);\n    }\n\n    /**\n     * store configuration  - called after loading configuration\n     */\n   public setByLoader(conf: any) {\n        this.config = conf;\n        this._isLoaded = true;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8,
                "modifierKind": [
                    113
                ]
            },
            "properties": [
                {
                    "name": "instance",
                    "type": "Configuration",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        115
                    ]
                },
                {
                    "name": "_isLoaded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractConfiguration"
                    }
                },
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractConfiguration"
                    }
                }
            ],
            "description": "<p>Singleton implementation of AbstractConfiguration</p>\n",
            "rawdescription": "Singleton implementation of AbstractConfiguration",
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "missingKeyConfig",
                            "type": "boolean | MissingKeyConfigurationEnum",
                            "defaultValue": "MissingKeyConfigurationEnum.Warn"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "description": "<p>static method to get value from configuration by key\nthis is shortcut for confortable usage if you want use one configuration\ninstance</p>\n<h3 id=\"example\">Example</h3>\n<p><code>typescript\n     * //simple\n     * Configuration.get(&#39;api.caseUrl&#39;)\n     *</code></p>\n",
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 874,
                                "end": 877,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 868,
                                "end": 873,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>item name</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 905,
                                "end": 921,
                                "flags": 0,
                                "escapedText": "missingKeyConfig"
                            },
                            "type": "boolean | MissingKeyConfigurationEnum",
                            "defaultValue": "MissingKeyConfigurationEnum.Warn",
                            "tagName": {
                                "pos": 899,
                                "end": 904,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>for backward compatibility supports also boolean that enables throwing error\nwhen true, logging warning otherwise</li>\n</ul>\n"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Configuration",
                    "typeParameters": [],
                    "line": 17,
                    "description": "<p>return instance of Configuration</p>\n",
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "setByLoader",
                    "args": [
                        {
                            "name": "conf",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "description": "<p>store configuration  - called after loading configuration</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "conf",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllItems",
                    "args": [],
                    "optional": false,
                    "returnType": "object",
                    "typeParameters": [],
                    "line": 50,
                    "description": "<p>return complete configuration data</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "AbstractConfiguration"
                    }
                },
                {
                    "name": "getByKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "missingKeyConfig",
                            "type": "boolean | MissingKeyConfigurationEnum",
                            "defaultValue": "MissingKeyConfigurationEnum.Warn"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "description": "<p>return configuration item</p>\n",
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 340,
                                "end": 343,
                                "flags": 0,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 334,
                                "end": 339,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>item name</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 369,
                                "end": 385,
                                "flags": 0,
                                "escapedText": "missingKeyConfig"
                            },
                            "type": "boolean | MissingKeyConfigurationEnum",
                            "defaultValue": "MissingKeyConfigurationEnum.Warn",
                            "tagName": {
                                "pos": 363,
                                "end": 368,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>for backward compatibility supports also boolean that enables throwing error\nwhen true, logging warning otherwise</li>\n</ul>\n"
                        },
                        {
                            "name": "defaultValue",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractConfiguration"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractConfiguration",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ConfigurationLoader",
            "id": "class-ConfigurationLoader-80f5acd696ceb5d9eba338ba0b91aca0",
            "file": "src/config-loader/configuration-loader.ts",
            "type": "class",
            "sourceCode": "import { Configuration } from './configuration';\n/**\n * Class to load Configuration class by given file with configuration JSON data as a map\n * Created by Rostislav Petr\n * Component on 2017-01-30\n */\nexport class ConfigurationLoader {\n\n    private url: string;\n    private async = true;\n    private objHttpReq: XMLHttpRequest;\n    public configuration: Configuration;\n    private callbackFunction: () => any;\n\n    constructor(configurationPath: string) {\n        this.url = configurationPath;\n        this.configuration = Configuration.getConfig();\n    }\n\n    public load(callbackFunction: () => any): void {\n        this.callbackFunction = callbackFunction;\n        this.objHttpReq = new XMLHttpRequest();\n        this.objHttpReq.overrideMimeType('application/json');\n        this.objHttpReq.onreadystatechange = () => this.onReadyStateChangeHandler();\n        this.objHttpReq.open('GET', this.url, this.async);\n        this.objHttpReq.send();\n    }\n\n    /**\n     * After load configuration parse to JSON object and set to Configuration singleton\n     */\n    private onReadyStateChangeHandler() {\n        if (this.objHttpReq.readyState === XMLHttpRequest.DONE && this.objHttpReq.status === 200) {\n            this.configuration.setByLoader(JSON.parse(this.objHttpReq.response));\n            this.callbackFunction();\n        }\n    }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "configurationPath",
                        "type": "string"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "configurationPath",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "async",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "callbackFunction",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "configuration",
                    "type": "Configuration",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "objHttpReq",
                    "type": "XMLHttpRequest",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "<p>Class to load Configuration class by given file with configuration JSON data as a map\nCreated by Rostislav Petr\nComponent on 2017-01-30</p>\n",
            "rawdescription": "Class to load Configuration class by given file with configuration JSON data as a map\nCreated by Rostislav Petr\nComponent on 2017-01-30",
            "methods": [
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "callbackFunction",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "callbackFunction",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReadyStateChangeHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "description": "<p>After load configuration parse to JSON object and set to Configuration singleton</p>\n",
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-68344b6be7b7ed451363516cc3b5310a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appName",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "appService",
                    "type": "AppService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'mvb-prototype-hybrid-webapp'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "onClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Configuration} from '../config-loader';\nimport {AppService} from './app.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'mvb-prototype-hybrid-webapp';\n  appName;\n\n  constructor(public appService: AppService) {\n  }\n\n  ngOnInit(): void {\n    this.appName = Configuration.get('appName');\n  }\n\n  onClosed(): void {\n    this.appService.alertMsg = null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<alert *ngIf=\"appService.alertMsg\" type=\"danger\" [dismissOnTimeout]=\"5000\" (onClosed)=\"onClosed()\">{{ appService.alertMsg }}</alert>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-1ba93e37c3203f2f89abd48aebe40126",
            "file": "src/app/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "defaultValue": "'tlacitko'",
                    "line": 10
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 11,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n\n  @Input() title = 'tlacitko';\n  @Output() btnClick: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button class=\"btn btn-primary\" (click)=\"btnClick.emit($event)\">\n  {{ title }}\n</button>\n"
        },
        {
            "name": "CameraComponent",
            "id": "component-CameraComponent-9329e52fc6a4f557fed1f2293682194a",
            "file": "src/app/camera/camera.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-camera",
            "styleUrls": [
                "./camera.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./camera.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "testovaciInput",
                    "defaultValue": "true",
                    "description": "<p>Nejaka dokumentace k testovacimu inputu</p>\n",
                    "line": 21,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "testovaciOutputx",
                    "line": 22,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "appService",
                    "type": "AppService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "onUseQRClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Configuration} from '../../config-loader';\nimport {AppService} from '../app.service';\nimport {HttpClient} from '@angular/common/http';\n\n@Component({\n  selector: 'app-camera',\n  templateUrl: './camera.component.html',\n  styleUrls: ['./camera.component.scss']\n})\nexport class CameraComponent implements OnInit {\n\n  constructor(private router: Router,\n              public appService: AppService,\n              private httpClient: HttpClient) { }\n\n  /**\n   * Nejaka dokumentace k testovacimu inputu\n   */\n  @Input() testovaciInput: boolean = true;\n  @Output() testovaciOutputx: EventEmitter<any>;\n\n  ngOnInit(): void {\n  }\n\n  onUseQRClick(): void {\n    const analyseQrCodeUrl: string = Configuration.get('analyseQrCodeUrl');\n    analyseQrCodeUrl.replace('{clientNumber}', this.appService.clientId);\n    this.httpClient.post(analyseQrCodeUrl, null).subscribe((next: any) => {\n      if (!next.valid) {\n        this.appService.alertMsg = 'QR Code is not valid';\n        return;\n      }\n\n      const pi = next.paymentInstruction;\n      this.appService.piAccount = pi.toAccount;\n      this.appService.piAmount = pi.amount;\n      this.appService.piVS = pi.variableSymbol;\n\n      this.router.navigate(['payment']);\n    }, error => {\n      this.appService.alertMsg = 'QR Code analysing Error';\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./camera.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" fxLayout=\"column\">\n  <div fxFlex=\"70\" fxLayoutAlign=\"space-around center\">\n    <img src=\"assets/qr.png\">\n  </div>\n  <div fxFlex=\"20\" fxLayoutAlign=\"space-around center\">\n    <button type=\"button\" class=\"btn btn-secondary w-50 mx-1\">Select from Album</button>\n    <button type=\"button\" class=\"btn btn-primary w-50 mx-1\" (click)=\"onUseQRClick()\">Use this QR Code</button>\n  </div>\n  <div fxFlex=\"10\"></div>\n</div>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-af9591fd8998a168f701913539810231",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appService",
                    "type": "AppService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "onPayWithQRClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onSearchClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {HttpClient} from '@angular/common/http';\nimport {Configuration} from '../../config-loader';\nimport {AppService} from '../app.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(private router: Router,\n              private httpClient: HttpClient,\n              public appService: AppService) { }\n\n  ngOnInit(): void {\n    const accountOverviewUrl: string = Configuration.get('accountOverviewUrl');\n    accountOverviewUrl.replace('{clientNumber}', this.appService.clientId);\n    this.httpClient.get(accountOverviewUrl).subscribe((next: any) => {\n      const accountOverview = next[0];\n      this.appService.accountNumber = accountOverview.accountNumber;\n      this.appService.balance = accountOverview.balance;\n    }, error => {\n      this.appService.alertMsg = 'AccountOverview Error';\n    });\n  }\n\n  onPayWithQRClick(): void {\n    this.router.navigate(['camera']);\n  }\n\n  onSearchClick(): void {\n    const transactionSearchUrl: string = Configuration.get('transactionSearchUrl');\n    transactionSearchUrl.replace('{clientNumber}', this.appService.clientId);\n    this.httpClient.post(transactionSearchUrl, null).subscribe((next: any) => {\n      const transactionSearchResult = next.transactionsFound;\n      this.appService.transactions = transactionSearchResult;\n    }, error => {\n      this.appService.alertMsg = 'TransactionSearch Error';\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" fxLayout=\"column\">\n  <div fxFlex=\"20\" fxLayoutAlign=\"space-around center\">\n    <h3>Account balance ${{ appService.balance }}</h3>\n  </div>\n  <div fxFlex=\"20\" fxLayoutAlign=\"space-around center\">\n    <button type=\"button\" class=\"btn btn-secondary w-50 mx-1\">Pay Manually</button>\n    <button type=\"button\" class=\"btn btn-primary w-50 mx-1\" (click)=\"onPayWithQRClick()\">Pay with QR</button>\n  </div>\n  <div fxFlex=\"20\" fxLayoutAlign=\"space-around center\">\n    <mat-form-field class=\"w-75 mx-1\">\n      <mat-label>Transaction Search</mat-label>\n      <input matInput>\n    </mat-form-field>\n    <button type=\"button\" class=\"btn btn-secondary w-25 mx-1\" (click)=\"onSearchClick()\">Search</button>\n  </div>\n  <div fxFlex=\"30\" fxLayout=\"column\" fxLayoutAlign=\"space-around start\" class=\"mx-2\">\n    <ng-container *ngFor=\"let t of appService.transactions\">\n      <p>From: {{ t.fromAccount }}</p>\n      <p>To: {{ t.toAccount }}</p>\n      <p>Amount: {{ t.amount }}</p>\n      <p>Date: {{ t.issueDate }}</p>\n    </ng-container>\n  </div>\n  <p></p>\n</div>\n"
        },
        {
            "name": "LandingComponent",
            "id": "component-LandingComponent-13cc47e026fecce5a1a8b94f504c512d",
            "file": "src/app/landing/landing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing",
            "styleUrls": [
                "./landing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "onTouchIdClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {HttpClient} from '@angular/common/http';\nimport {Configuration, MissingKeyConfigurationEnum} from '../../config-loader';\nimport {AppService} from '../app.service';\n\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.scss']\n})\nexport class LandingComponent implements OnInit {\n\n  constructor(private router: Router,\n              private httpClient: HttpClient,\n              private appService: AppService) { }\n\n  ngOnInit(): void {\n  }\n\n  onTouchIdClick(): void {\n    this.httpClient.post(Configuration.get('loginUrl'), null).subscribe((next: any) => {\n      this.appService.email = next.sessionInfo.email;\n      this.appService.clientId = next.sessionInfo.clientId;\n      this.router.navigate(['home']);\n    }, error => {\n      this.appService.alertMsg = 'Authentication Error';\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" fxLayout=\"column\">\n  <div fxFlex=\"20\" fxLayoutAlign=\"space-around center\"><h3>Welcome to KB MVI</h3></div>\n  <div fxFlex=\"40\" fxLayoutAlign=\"space-around center\"><img src=\"assets/kb-logo.svg\" class=\"w-50\"></div>\n  <div fxFlex=\"20\"></div>\n  <div fxFlex=\"10\" >\n    <button (click)=\"onTouchIdClick()\"\n            class=\"btn btn-primary w-100\"\n            type=\"button\">TouchId\n    </button>\n  </div>\n  <div fxFlex=\"10\"></div>\n</div>\n"
        },
        {
            "name": "PaymentComponent",
            "id": "component-PaymentComponent-c62fc0cd14182699b49351e9060f3aa8",
            "file": "src/app/payment/payment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-payment",
            "styleUrls": [
                "./payment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./payment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appService",
                    "type": "AppService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onSendClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {AppService} from '../app.service';\nimport {Configuration} from '../../config-loader';\nimport {HttpClient, HttpParams} from '@angular/common/http';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.scss']\n})\nexport class PaymentComponent implements OnInit {\n\n  constructor(private router: Router,\n              public appService: AppService,\n              private httpClient: HttpClient) { }\n\n  ngOnInit(): void {\n  }\n\n  onSendClick(): void {\n    const paymentUrl: string = Configuration.get('paymentUrl');\n    paymentUrl.replace('{clientNumber}', this.appService.clientId);\n    const params = new HttpParams()\n      .append('amount', String(this.appService.piAmount))\n      .append('toAccount', this.appService.piAccount);\n    this.httpClient.post(paymentUrl, null, { params}).subscribe((next: any) => {\n      if (next.paymentState !== 'ACCEPTED') {\n        this.appService.alertMsg = 'Payment denied';\n        return;\n      }\n\n      this.router.navigate(['home']);\n    }, error => {\n      this.appService.alertMsg = 'AccountOverview Error';\n    });\n  }\n\n  onCancelClick(): void {\n    this.router.navigate(['camera']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./payment.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "appService",
                        "type": "AppService"
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appService",
                        "type": "AppService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\" fxLayout=\"column\">\n  <div fxFlex=\"20\" fxLayoutAlign=\"space-around center\">\n    <h5>Payment information found in QR Code:</h5>\n  </div>\n  <div fxFlex=\"40\" fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\n    <mat-form-field class=\"w-100\">\n      <mat-label>Recipient Bank Account #</mat-label>\n      <input matInput [value]=\"appService.piAccount\">\n    </mat-form-field>\n    <mat-form-field class=\"w-100\">\n      <mat-label>Variable Symbol</mat-label>\n      <input matInput [value]=\"appService.piVS\">\n    </mat-form-field>\n    <mat-form-field class=\"w-100\">\n      <mat-label>Amount to send</mat-label>\n      <input matInput [value]=\"appService.piAmount\">\n    </mat-form-field>\n  </div>\n  <div fxFlex></div>\n  <div fxFlex=\"20\" fxLayoutAlign=\"space-around center\">\n    <button type=\"button\" class=\"btn btn-secondary w-50 mx-1\" (click)=\"onCancelClick()\">Cancel</button>\n    <button type=\"button\" class=\"btn btn-primary w-50 mx-1\" (click)=\"onSendClick()\">Send</button>\n  </div>\n  <div fxFlex=\"10\"></div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CameraComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "LandingComponent"
                        },
                        {
                            "name": "PaymentComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "configLoader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "type": "",
                "defaultValue": "new ConfigurationLoader('assets/config/config.json')"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "type": "",
                "defaultValue": "() => (\n  {\n    template: `\n    <input class=\"form-control\" placeholder=\"{{ placeholder }}\" [value]=\"inputValue\">\n   `,\n  props: {\n    placeholder: text('placeholder', 'fill something...'),\n    inputValue: text('value', 'default value')\n  },\n})",
                "description": "<ul>\n<li>blabla</li>\n<li>blabla</li>\n</ul>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/testovaci.stories.ts",
                "type": "",
                "defaultValue": "() => (\n  {\n    component: CameraComponent,\n  props: {\n\n  },\n})",
                "description": "<ul>\n<li>blabla</li>\n<li>blabla</li>\n</ul>\n"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/transaction.stories.ts",
                "type": "",
                "defaultValue": "() => (\n  {\n    template: `\n    <input class=\"form-control\" placeholder=\"{{ placeholder }}\" [value]=\"inputValue\">\n   `,\n  props: {\n    placeholder: text('placeholder', 'fill something...'),\n    inputValue: text('value', 'default value')\n  },\n})",
                "description": "<ul>\n<li>blabla</li>\n<li>blabla</li>\n</ul>\n"
            },
            {
                "name": "disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "type": "",
                "defaultValue": "() => (\n  {\n    template: `\n    <input class=\"form-control\" placeholder=\"{{ placeholder }}\" [value]=\"inputValue\" [disabled]=\"disabled\">\n   `,\n    props: {\n      placeholder: text('placeholder', 'fill something...'),\n      inputValue: text('value', 'default value'),\n      disabled: boolean('disabled', true)\n    },\n  })"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MissingKeyConfigurationEnum",
                "childs": [
                    {
                        "name": "Warn"
                    },
                    {
                        "name": "ThrowError"
                    },
                    {
                        "name": "Ignore"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "<p>Enumeration to configure config key loading.</p>\n",
                "file": "src/config-loader/types.ts"
            }
        ],
        "groupedVariables": {
            "src/main.ts": [
                {
                    "name": "configLoader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "type": "",
                    "defaultValue": "new ConfigurationLoader('assets/config/config.json')"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/stories/input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => (\n  {\n    template: `\n    <input class=\"form-control\" placeholder=\"{{ placeholder }}\" [value]=\"inputValue\">\n   `,\n  props: {\n    placeholder: text('placeholder', 'fill something...'),\n    inputValue: text('value', 'default value')\n  },\n})",
                    "description": "<ul>\n<li>blabla</li>\n<li>blabla</li>\n</ul>\n"
                },
                {
                    "name": "disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => (\n  {\n    template: `\n    <input class=\"form-control\" placeholder=\"{{ placeholder }}\" [value]=\"inputValue\" [disabled]=\"disabled\">\n   `,\n    props: {\n      placeholder: text('placeholder', 'fill something...'),\n      inputValue: text('value', 'default value'),\n      disabled: boolean('disabled', true)\n    },\n  })"
                }
            ],
            "src/stories/testovaci.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/testovaci.stories.ts",
                    "type": "",
                    "defaultValue": "() => (\n  {\n    component: CameraComponent,\n  props: {\n\n  },\n})",
                    "description": "<ul>\n<li>blabla</li>\n<li>blabla</li>\n</ul>\n"
                }
            ],
            "src/stories/transaction.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/transaction.stories.ts",
                    "type": "",
                    "defaultValue": "() => (\n  {\n    template: `\n    <input class=\"form-control\" placeholder=\"{{ placeholder }}\" [value]=\"inputValue\">\n   `,\n  props: {\n    placeholder: text('placeholder', 'fill something...'),\n    inputValue: text('value', 'default value')\n  },\n})",
                    "description": "<ul>\n<li>blabla</li>\n<li>blabla</li>\n</ul>\n"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/config-loader/types.ts": [
                {
                    "name": "MissingKeyConfigurationEnum",
                    "childs": [
                        {
                            "name": "Warn"
                        },
                        {
                            "name": "ThrowError"
                        },
                        {
                            "name": "Ignore"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "<p>Enumeration to configure config key loading.</p>\n",
                    "file": "src/config-loader/types.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "landing",
                        "pathMatch": "full"
                    },
                    {
                        "path": "landing",
                        "component": "LandingComponent"
                    },
                    {
                        "path": "home",
                        "component": "HomeComponent"
                    },
                    {
                        "path": "camera",
                        "component": "CameraComponent"
                    },
                    {
                        "path": "payment",
                        "component": "PaymentComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 22,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/camera/camera.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CameraComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/landing/landing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/payment/payment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaymentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/config-loader/abstract-configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractConfiguration",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "src/config-loader/configuration-loader.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConfigurationLoader",
                "coveragePercent": 22,
                "coverageCount": "2/9",
                "status": "low"
            },
            {
                "filePath": "src/config-loader/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Configuration",
                "coveragePercent": 60,
                "coverageCount": "6/10",
                "status": "good"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configLoader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/testovaci.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/transaction.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}